---
import content from '../../content/atlant.json';
import Card from './Card.astro';
import Modal from './Modal.astro';
import Search from './Search.astro';

const { games } = content;
---
<section class="games" id={games.id}>
  <header>
    <h2>{games.title}</h2>
    <Search />
  </header>
  <div class="games__container scroll-container">
    <ul class="gamelist">
      {games.list.map((game) => (
        <li class="gamelist__item" data-name={game.title}>
          <Card game={game} />
          <Modal game={game} />
        </li>
      ))}
    </ul>
  </div>
</section>

<style>
  section {
    position: relative;
    z-index: 3;
    margin-top: var(--gap-l);
    border-radius: var(--radius-xl);
    padding: 68px 48px 42px;
    background-color: var(--primary-1);
    color: var(--text);
    overflow: hidden;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 64px;
  }

  h2 {
    font-size: 80px;
    line-height: 86px;
    color: var(--text);
  }

  .games__container {
    max-height: 1114px;
    overflow-y: auto;
    margin-right: -48px;
    padding-right: 24px;
  }

  .gamelist {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 42px var(--gap-xl);
    list-style: none;
    padding: 0;
    position: relative;
    overflow: hidden;
    padding-bottom: 50px;
  }

  section:after {
    content: '';
    pointer-events: none;
    position: absolute;
    bottom: -50px;
    left: 0;
    width: 100%;
    height: 384px;
    background: linear-gradient(0.00deg, rgb(0, 0, 0) 14.848%,rgba(0, 0, 0, 0) 88.707%);
  }

  .gamelist__item {
    transition: 0.3s ease;
    transition-property: opacity, transform;
  }

  li.hidden {
    opacity: 0;
    translate: 0 -100%;
    order: 1000;
  }
</style>

<script>
  const wrap = document.querySelector('.games') as HTMLElement;
  const searchInput = document.querySelector('.search__input') as HTMLInputElement;
  const list = wrap.querySelectorAll('.gamelist__item');

  searchInput.addEventListener('input', (event) => {
    const filterValue = (event.target as HTMLInputElement).value.toLowerCase();
    
    list.forEach(listItem => {
      const cardName = (listItem as HTMLElement).dataset.name?.toLowerCase() || '';
      
      if (cardName.includes(filterValue)) {
          listItem.classList.remove('hidden');
        } else {
          listItem.classList.add('hidden');
      }
    });
  });

  const cards = document.querySelectorAll('.game');
  const modals = document.querySelectorAll('.modal') as NodeListOf<HTMLDivElement>;

  cards.forEach((card) => {
    const moar = card.querySelector('.game__moar') as HTMLButtonElement;
    const modalId = moar.dataset.moarId;

    moar.addEventListener('click', () => {
      const modalToShow = Array.from(modals).find((modal) => modal.dataset.modalId === modalId);
      modalToShow.classList.remove('hidden');
    });
  });

  modals.forEach((modal) => {
    const closeEls = modal.querySelectorAll('[data-modal-close]');

    closeEls.forEach((closer) => {
      closer.addEventListener('click', () => {
        modal.classList.add('hidden');
      });
    })
  });
</script>